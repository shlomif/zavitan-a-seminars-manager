<?xml version='1.0' ?>

<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oa
sis-open.org/docbook/xml/4.1.2/docbookx.dtd"[]> -->
<!-- This comment is meant to settle gvim -->

<chapter id="arch">
    <title>Architecture</title>
    <section id="mdda">
        <title>Meta-Data Database Access</title>
        <para>
            Meta-Data Database Access is a methodology for programmatically
            working with databases that allow for an easier adaptation of 
            existing code to changes in the database structure. With MDDA it
            is possible to add, modify or remove fields with much more ease
            than with them encoded in many different queries throughout
            the code.
        </para>
        <para>
            While using MDDA, a description data structure is created for
            each table. This data structure contains a list of fields, their
            types, parameters, constraints and display options. The back-end
            builds its queries and forms based on this list.
        </para>
        <para>
            In order to add, remove or edit a field, it is performed on the 
            list of fields in the data structure, and so it propagates 
            throughout the entire code. One can also add constraints to this
            data structure, and they will be taken into account, wherever
            the fields are being input.
        </para>
        <para>
            We have built one class for our MDDA needs: 
            <classname>Technion::Seminars::MDDA::OneTable</classname>. This
            class manages form rendering and validation for addition and 
            editing of one-table based queries (with the possibility of 
            triggers to maintain dependency with other tables).
        </para>
    </section>
    <section id="classes">
        <title>Classes</title>
        <para>
            In this section we will cover the classes that were used
            in the code.
        </para>
        <section id="arad_types">
            <title>Arad::Types</title>
            <para>
                Arad::Types is a type manager that manages an hierarchy of
                types and allows validating a type instance, and comparing
                one type instance to another. Types may inherit each other,
                to allow for derived types and sub-classes.
            </para>
            <para>
                Each type is identified by a symbolic name, and registered by 
                using the function <function>register_type</function>. Upon
                operation a type accepts a reference to a hash called 
                <parameter class="function">type_params</parameter> that 
                specifies some parameters for the type. For instance, the 
                <parameter class="function">len</parameter> paramter 
                specifies the length of an instance of the a string-like 
                type.
            </para>
            <para>
                We encapsulated each type in its own module.
            </para>
        </section>
        <section id="gamla_textstream_out">
            <title>Gamla::TextStream::Out</title>
            <para>
                This is a minimal class that outputs text. An invocation
                of the method print causes its arguments to be written
                indirectly written to a specified file handle.
            </para>
        </section>
        <section id="layout">
            <title>Technion::Seminars::Layout</title>
            <para>
                This class manages the generic layout of the site. It prints
                the HTML header and the navigation bar, calls a callback to
                print the body of the page, and prints the HTML footer.
            </para>
            <para>
                The method <function>linkto</function> can be used to give
                a relative URL to different parts of the sites. It is internally
                used to render the navigation bar.
            </para>
            <para>
                The method <function>render</function> does the actual 
                rendering of the site layout. It accepts as a paramters the 
                text-stream that should be used to output text to the screen,
                and the callback to render the contents of the site.
            </para>
        </section>
        <section id="userman">
            <title>Technion::Seminars::UserMan</title>
            <para>
                This class manages the users of the site and determines their
                permissions. Zavitan encodes the username and password inside
                a cookie, while keeping the password encyrypted there. This
                class analyzes the cookie and determines the username and 
                password. Afterwards, it queries the database for what the
                user is allowed to do.
            </para>
            <para>
                The function <function>get_admin_level</function> returns
                the administrator level of the user based on his username
                and password. It verifies that the password that was given to 
                it is the correct one, and then checks the super admin flag
                to determine if the user is a site admin. It returns the
                level of the user and his user ID.
            </para>
            <para>
                The function <function>can_edit_club</function> determines 
                whether a given user can edit a club. It queries the 
                database for the seminars and subjects flag of this user.
            </para>
        </section>
        <section id="config">
            <title>Technion::Seminars::Config</title>

            <para>
                This module provides a central place for specifying common
                configuration parameters across the different modules. This
                module includes information about the URLs in which the
                site resides, MySQL information and the information required
                by the MDDA interface.
            </para>
            <para>
                It includes a list of tables, and each one contains a list
                of fields, as well as optional lists of derived-table, triggers,
                and record-wide input constraints. For each field the following
                paramters are specified:
            </para>
            <para>
                <orderedlist>
                    <listitem>
                        <parameter>name</parameter> - the field's SQL name.
                    </listitem>
                    <listitem>
                        <parameter>title</parameter> (optional) - the title
                        as it appears to the user.
                    </listitem>
                    <listitem>
                        <parameter>type</parameter> - the field's 
                        <classname>Arad::Types</classname> type-ID.
                    </listitem>
                    <listitem>
                        <parameter>type_params</parameter> - the field's
                        type paramters
                    </listitem>
                    <listitem>
                        <parameter>input</parameter> (optional) - the way this field is
                        being input.
                    </listitem>
                    <listitem>
                        <parameter>input_params</parameter> (optional) - constraints on
                        the field
                    </listitem>
                    <listitem>
                        <parameter>display</parameter> (optional) - the manner 
                        the field is displayed on the form. Can be constant (in
                        which case it is not editable), password, or hidden.
                    </listitem>
                    <listitem>
                        <parameter>widget_params</parameter> - specifies the
                        control used for editing the type.
                    </listitem>
                </orderedlist>
            </para>
        </section>
        
    </section>
</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-parent-document: "zavitan.xml"
End:
-->

