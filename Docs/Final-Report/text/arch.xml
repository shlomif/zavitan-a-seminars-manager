<?xml version='1.0' ?>

<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oa
sis-open.org/docbook/xml/4.1.2/docbookx.dtd"[]> -->
<!-- This comment is meant to settle gvim -->

<chapter id="arch">
    <title>Architecture</title>
    <section id="mdda">
        <title>Meta-Data Database Access</title>
        <para>
            Meta-Data Database Access is a methodology for programmatically
            working with databases that allow for an easier adaptation of 
            existing code to changes in the database structure. With MDDA it
            is possible to add, modify or remove fields with much more ease
            than with them encoded in many different queries throughout
            the code.
        </para>
        <para>
            While using MDDA, a description data structure is created for
            each table. This data structure contains a list of fields, their
            types, parameters, constraints and display options. The back-end
            builds its queries and forms based on this list.
        </para>
        <para>
            In order to add, remove or edit a field, it is performed on the 
            list of fields in the data structure, and so it propagates 
            throughout the entire code. One can also add constraints to this
            data structure, and they will be taken into account, wherever
            the fields are being input.
        </para>
        <para>
            We have built one class for our MDDA needs: 
            <classname>Technion::Seminars::MDDA::OneTable</classname>. This
            class manages form rendering and validation for addition and 
            editing of one-table based queries (with the possibility of 
            triggers to maintain dependency with other tables).
        </para>
    </section>
    <section id="classes">
        <title>Classes</title>
        <para>
            In this section we will cover the classes that were used
            in the code.
        </para>
        <section id="arad_types">
            <title>Arad::Types</title>
            <para>
                Arad::Types is a type manager that manages an hierarchy of
                types and allows validating a type instance, and comparing
                one type instance to another. Types may inherit each other,
                to allow for derived types and sub-classes.
            </para>
            <para>
                Each type is identified by a symbolic name, and registered by 
                using the function <function>register_type</function>. Upon
                operation a type accepts a reference to a hash called 
                <parameter class="function">type_params</parameter> that 
                specifies some parameters for the type. For instance, the 
                <parameter class="function">len</parameter> paramter 
                specifies the length of an instance of the a string-like 
                type.
            </para>
            <para>
                We encapsulated each type in its own module.
            </para>
        </section>
        
    </section>
</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-parent-document: "zavitan.xml"
End:
-->

