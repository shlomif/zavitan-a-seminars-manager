#!/usr/bin/perl -w

# This is meant to suppress these annoying "subroutine redefined" warnings
no warnings "redefine";

use strict;

use CGI;

use Technion::Seminars::Config;
use Technion::Seminars::Layout;
use Technion::Seminars::SlashUrl;
use Technion::Seminars::DBI;
use Technion::Seminars::TypeMan;

use Gamla::TextStream::Out::File;

use POSIX qw(strftime);

use Time::DaysInMonth;
use Date::DayOfWeek;

my $q = CGI->new();

my ($year, $month, $day);

sub check_url
{
    my $url = shift;

    my $verdict = ($url =~ /^day\/(\d{4})\/(0[1-9]|1[0-2])\/(0[1-9]|[1-2][0-9]|3[0-1])\/$/) ? 1 : 0;

    if ($verdict)
    {

        ($year,$month,$day) = ($1,$2,$3);

        if ($day > days_in($year, $month))
        {
            $verdict = 0;
        }
    }
    
    return ($verdict, strftime("day/%Y/%m/%d/", localtime(time())));
}

# Make sure our URL ends with a slash.
my $base_url = &normalize_url($q, \&check_url);

print $q->header();

use vars qw($title);
$title = "Daily Calendar of " . sprintf("%.2i/%.2i/%.4i", $day, $month, $year);

my $layout = 
    Technion::Seminars::Layout->new(
        'path' => $base_url,
        'title' => $title,
    );

my $o = Gamla::TextStream::Out::File->new(\*STDOUT);

my $get_prev_day = sub {
    my $new_month = $month;
    my $new_year = $year;
    my $new_day = $day;
    if ($day == 1)
    {
        $new_month--;
        if ($new_month == 0)
        {
            $new_month = 12;
            $new_year--;
        }
        $new_day = days_in($new_year, $new_month);
    }
    else
    {   
        $new_day--;
    }
    return $layout->linkto(["day", $new_year, sprintf("%.2i", $new_month), sprintf("%.2i", $new_day)]);
};

my $get_next_day = sub {
    my $new_month = $month;
    my $new_year = $year;
    my $new_day = $day;
    if ($new_day == days_in($year, $month))
    {
        $new_day = 1;
        $new_month++;
        if ($new_month == 13)
        {
            $new_month = 1;
            $new_year++;
        }
    }
    else
    {
        $new_day++;
    }
    return $layout->linkto(["day", $new_year, sprintf("%.2i", $new_month), sprintf("%.2i", $new_day)]);
};

sub normalize_weekday
{
    my ($y,$m,$d) = @_;
    
    my $dow = dayofweek($d,$m,$y);

    # 0 is sunday.
    if ($d - $dow >= 1)
    {
        return ($y,$m,$d-$dow);
    }
    
    if ($m > 1)
    {
        return ($y, $m-1, days_in($y, $m-1) + $d - $dow);
    }
    else
    {
        return ($y-1, 12, days_in($y-1,12) + $d - $dow);
    }
}

my $get_this_week = sub {
    my ($y,$m,$d) = normalize_weekday($year, $month, $day);
    return $layout->linkto(["week", $y, $m, $d]);    
};


sub draw_page
{
    my $o = shift;

    $o->print("<h1>$title</h1>\n");

    my $navigation_bar = 
        "<table border=\"1\">\n" .
        "<tr>\n" .
        "<td><a href=\"" . $get_prev_day->() . "\">Previous Day</a></td>\n" .
        "<td><a href=\"" . $get_next_day->() . "\">Next Day</a></td>\n" .
        "<td><a href=\"" . $get_this_week->() . "\">This Week</a></td>\n" .
        "<td><a href=\"" . $layout->linkto(["month", $year, $month]) . "\">This Month</a></td>\n" .
        "</tr>\n</table>\n";

    $o->print($navigation_bar);

    my $dbh = Technion::Seminars::DBI->new();

    my $sth = $dbh->prepare("SELECT seminars.Seminar_ID, seminars.Title, seminars.Time FROM seminars, associations WHERE seminars.Date = " . $dbh->quote(sprintf("%.4i-%.2i-%.2i", $year,$month,$day)) . " AND seminars.Seminar_ID = associations.Seminar_ID GROUP BY seminars.Seminar_ID ORDER BY seminars.Time");

    my $rv = $sth->execute();

    my $this_time = strftime("%k:%M:%S", localtime(time()));

    my $this_date = strftime("%F", localtime(time()));

    my $date = "$year-$month-$day";

    my $type_man = Technion::Seminars::TypeMan::get_type_man();

    my $before_date = $type_man->compare_values("date", "", $date, $this_date);
    

    while (my $row = $sth->fetchrow_arrayref())
    {
        my ($seminar_id, $title, $time_raw) = @$row;
        my $time;

        my $before = $before_date || $type_man->compare_values("time", "", $time, $this_time);

        my $class = ($before < 0) ? "after" : "before";

        $time_raw =~ m/^(\d+):(\d+)/;
        $time = "$1:$2";

        $o->print("<p><b class=\"$class\">$time</b>: <a href=\"../../../../seminar/$seminar_id/\" class=\"$class\">" . CGI::escapeHTML($title) . "</a></p>");        
    }

}







$layout->render($o, \&draw_page);
