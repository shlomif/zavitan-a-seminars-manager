#!/usr/bin/perl -w

# This is meant to suppress these annoying "subroutine redefined" warnings
no warnings "redefine";

use strict;

use CGI;

use DBI;

use Technion::Seminars::Config;
use Technion::Seminars::Layout;
use Technion::Seminars::SlashUrl;
use Technion::Seminars::UserMan;
use Technion::Seminars::TypeMan;
use Technion::Seminars::DBI;
use Technion::Seminars::MDDA::OneTable;

use Gamla::TextStream::Out::File;

my $q = CGI->new();

sub check_url
{
    my $url = shift;

    my $verdict = ($url =~ /^admin\/users\/(([A-Za-z_]*\/(edit\.cgi)?)|(new\/(add\.cgi)?))?$/) ? 1 : 0;
    
    return ($verdict, "admin/users/");
}

# Make sure our URL ends with a slash.
my $base_url = &normalize_url($q, \&check_url, "https");

my (%cookie);
my ($user, $password, $user_id);
my $admin_level = "readonly";

my $user_man = Technion::Seminars::UserMan->new();

if (%cookie = $q->cookie('seminars_auth'))
{
    $user = $cookie{'user'};
    $password = $cookie{'password'};

    ($admin_level, $user_id) = $user_man->get_admin_level($user, $password);
}

print $q->header();

my $title = "User Management";

my $base_url_wo_last_component = $base_url;
$base_url_wo_last_component =~ s/\/[^\/]*$//;

my $layout = 
    Technion::Seminars::Layout->new(
        'path' => $base_url_wo_last_component,
        'title' => $title,
        'admin_level' => $admin_level,
    );

my $o = Gamla::TextStream::Out::File->new(\*STDOUT);

my $draw_page = sub {
    my $o = shift;

    my $mdda = 
        Technion::Seminars::MDDA::OneTable->new(
            'users', 
            $config{'database'}->{'tables'}->{'users'}
        );
   
    # Only site-wide admins can enter this page
    if ($admin_level eq "site")
    {
        if ($base_url eq "admin/users/")
        {
            # Output a list of users with links
            
            $o->print("<h1>$title</h1>\n\n");
            $o->print("<h2><a href=\"./new/\">Add a New User</a></h2>\n");
            $o->print("<h2>Existing Users</h2>\n");

            my $dbh = Technion::Seminars::DBI->new();
            my $sth = $dbh->prepare("SELECT * FROM users ORDER BY Username");
            my $rv = $sth->execute();
            while (my $row = $sth->fetchrow_hashref())
            {
                $o->print("<p>\n<a href=\"./" . $row->{'Username'} . "/\">");
                $o->print($row->{'Username'} . " (" .$row->{'Name'} . ")</a>\n");
                $o->print("</p>\n\n");
            }
        }
        elsif ($base_url eq "admin/users/new/")
        {
            # Output a form with which one can add a new user.

            $o->print("<h1>Add a New User</h1>\n\n");

            $mdda->render_add_form($o);
        }
        elsif ($base_url eq "admin/users/new/add.cgi")
        {
            $mdda->perform_add_operation($q, $o, "The user was added");
        }
        elsif ($base_url =~ m/^admin\/users\/(\w+)\/$/)
        {
            # Display a form to edit the current user.
            my $username = $1;

            $mdda->render_edit_form($o, "Username", $username);
        }
        elsif ($base_url =~ m/^admin\/users\/(\w+)\/edit.cgi$/)
        {

            $mdda->perform_edit_operation(
                $q, $o,
                "User_ID",                
                'record-title' => "user",
                'id-field-title' => "user ID",
                'dependent-tables' => [ "permissions"],
            );
        }
    }
};

$layout->render($o, $draw_page);
