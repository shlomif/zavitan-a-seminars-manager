#!/usr/bin/perl -w

# This is meant to suppress these annoying "subroutine redefined" warnings
no warnings "redefine";

use strict;

use CGI;

use DBI;

use Technion::Seminars::Config;
use Technion::Seminars::Layout;
use Technion::Seminars::SlashUrl;
use Technion::Seminars::UserMan;
use Technion::Seminars::TypeMan;

use Gamla::TextStream::Out::File;

my $q = CGI->new();

sub check_url
{
    my $url = shift;

    my $verdict = ($url =~ /^admin\/users\/(([A-Za-z_]*\/)|(new\/(add\.cgi)?))?$/) ? 1 : 0;
    
    return ($verdict, "admin/users/");
}

# Make sure our URL ends with a slash.
my $base_url = &normalize_url($q, \&check_url, "https");

my (%cookie);
my ($user, $password);
my $admin_level = "readonly";

my $user_man = Technion::Seminars::UserMan->new();

if (%cookie = $q->cookie('seminars_auth'))
{
    $user = $cookie{'user'};
    $password = $cookie{'password'};

    $admin_level = $user_man->get_admin_level($user, $password);
}

print $q->header();

my $title = "User Management";

my $base_url_wo_last_component = $base_url;
$base_url_wo_last_component =~ s/\/[^\/]*$//;

my $layout = 
    Technion::Seminars::Layout->new(
        'path' => $base_url_wo_last_component,
        'title' => $title,
        'admin_level' => $admin_level,
    );

my $o = Gamla::TextStream::Out::File->new(\*STDOUT);

my $draw_page = sub {
    my $o = shift;        
    
    if ($admin_level eq "site")
    {
        if ($base_url eq "admin/users/")
        {
            $o->print("<h1>$title</h1>\n\n");
            $o->print("<h2><a href=\"./new/\">Add a New User</a></h2>");
            $o->print("<h2>Existing Users</h2>\n");
            
            my $dbh = DBI->connect(@{$config{'database'}}{'dsn', 'user', 'password'});
            my $sth = $dbh->prepare("SELECT * FROM users ORDER BY Username");
            my $rv = $sth->execute();
            while (my $row = $sth->fetchrow_hashref())
            {
                $o->print("<p>\n<a href=\"./" . $row->{'Username'} . "/\">");
                $o->print($row->{'Username'} . " (" .$row->{'Name'} . ")</a>\n");
                $o->print("</p>\n\n");
            }
        }
        elsif ($base_url eq "admin/users/new/")
        {
            $o->print("<h1>Add a New User</h1>\n\n");

            $o->print("<form method=\"post\" action=\"add.cgi\">\n");
            foreach my $field (@{$config{'database'}->{'tables'}->{'users'}->{'fields'}})
            {
                if ($field->{'input'}->{'type'} eq "auto")
                {
                    next;
                }
                $o->print("<b>" .
                    (exists($field->{'title'}) ? 
                        $field->{'title'} : 
                        $field->{'name'}
                    ) . 
                    "</b>: <input type=\"" . 
                    (($field->{'display'}->{'type'} eq "password") ? 
                        "password" : 
                        "text"
                    ) . 
                    "\" name=\"" . 
                    $field->{'name'} . 
                    "\" /><br />\n"
                    );
            }
            $o->print("\n\n<input type=\"submit\" value=\"Add\" />\n\n");
            $o->print("</form>\n");
        }
        elsif ($base_url eq "admin/users/new/add.cgi")
        {
            eval {

                my $dbh = DBI->connect(@{$config{'database'}}{'dsn', 'user', 'password'});
                    
                my (@query_fields, @query_values);
                my $type_man = Technion::Seminars::TypeMan::get_type_man();

             
                foreach my $field (@{$config{'database'}->{'tables'}->{'users'}->{'fields'}})
                {
                    push @query_fields, $field->{'name'};
                    my $value = "";
                    my $input = $field->{'input'} || { 'type' => "normal", };
                    
                    if ($input->{'type'} eq "auto")
                    {
                        if ($input->{'method'} eq "by-value")
                        {
                            $value = $input->{'value'};
                        }
                        elsif ($input->{'method'} eq "get-new-id")
                        {
                            # Note: MySQL Specific
                            $value = 0;
                        }
                    }
                    else
                    {
                        $value = $q->param($field->{'name'});
                        my ($status, $error_string) = ($type_man->check_value($field->{'type'}, $field->{'type_params'}, $value));
                        if ($status)
                        {
                            $error_string =~ s/\$F/$field->{'name'}/ge;
                            die ($field->{'name'} . " could not be accepted: $error_string");
                        }

                        my $input_params_arr = $field->{'input_params'};
                        if ($input_params_arr)
                        {
                            foreach my $input_params ((ref($input_params_arr) eq "ARRAY") ? @$input_params_arr : ($input_params_arr))
                            {
                                if ($input_params->{'unique'})
                                {
                                    my $sth = $dbh->prepare("SELECT count(*) FROM users WHERE " . $field->{'name'} . " = " . $dbh->quote($value));
                                    my $rv = $sth->execute();
                                    my $ary_ref = $sth->fetchrow_arrayref();
                                    if ($ary_ref->[0] > 0)
                                    {
                                        die ($field->{'name'} ." must be unique while a duplicate entry already exists!");
                                    }
                                }
                                if ($input_params->{'not_match'})
                                {
                                    my $pattern = $input_params->{'not_match'};
                                    if ($value =~ /$pattern/);
                                    {
                                        die $input_params->{'comment'};
                                    }
                                }
                                if ($input_params->{'match'})
                                {
                                    my $pattern = $input_params->{'match'};
                                    if ($value !~ /$pattern/)
                                    {
                                        die $input_params->{'comment'};
                                    }
                                }
                            }
                        }
                    }

                    push @query_values, $value;
                }

                my $sql_insert_query = "INSERT INTO users (" . join(",", @query_fields) . ") VALUES (" . join(",", map { $dbh->quote($_) } @query_values) . ")";

                my $sth = $dbh->prepare($sql_insert_query);
                
                my $rv = $sth->execute();

                $o->print("<h1>OK</h1>\n");
                $o->print("<p>The user was added.</p>\n");
            };

            if ($@)
            {
                $o->print("<h1>Error in Input!</h1>\n\n");
                $o->print("<p>" . $@ . "</p>");
            }
        }
    }
};

$layout->render($o, $draw_page);
