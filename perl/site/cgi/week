#!/usr/bin/perl -w

# This is meant to suppress these annoying "subroutine redefined" warnings
no warnings "redefine";

use strict;

use CGI;

use POSIX qw(strftime);

use Time::DaysInMonth;
use Date::DayOfWeek;

use Gamla::TextStream::Out::File;

use Technion::Seminars::Config;
use Technion::Seminars::Layout;
use Technion::Seminars::SlashUrl;
use Technion::Seminars::TypeMan;
use Technion::Seminars::DBI;

use Technion::Seminars::Utils qw(@week_days_abbrevs);

my $q = CGI->new();

my ($year, $month, $day);

sub normalize_weekday
{
    my ($y,$m,$d) = @_;
    
    my $dow = dayofweek($d,$m,$y);

    # 0 is sunday.
    if ($d - $dow >= 1)
    {
        return ($y,$m,$d-$dow);
    }
    
    if ($m > 1)
    {
        return ($y, $m-1, days_in($y, $m-1) + $d - $dow);
    }
    else
    {
        return ($y-1, 12, days_in($y-1,12) + $d - $dow);
    }
}

sub check_url
{
    my $url = shift;

    my ($y,$m,$d);

    my $verdict = ($url =~ /^week\/(\d{4})\/(0[1-9]|1[0-2])\/(0[1-9]|[1-2][0-9]|3[0-1])\/$/) ? 1 : 0;

    if ($verdict)
    {
        ($y,$m,$d) = ($1,$2,$3);

        if ($d > days_in($y, $m))
        {
            $d = days_in($y, $m);

            $verdict = 0;
        }

        my ($y2,$m2,$d2) = &normalize_weekday($y,$m,$d);
        if (($y != $y2) || ($m != $m2) || ($d != $d2))
        {
            $verdict = 0;
            ($y,$m,$d) = ($y2,$m2,$d2);
        }
    }
    else
    {
        my @time_vars = localtime(time());

        ($y,$m,$d) = &normalize_weekday($time_vars[5]+1900, $time_vars[4]+1, $time_vars[3]);        
    }

    ($year,$month,$day) = ($y,$m,$d);    
    
    return ($verdict, sprintf("week/%04i/%02i/%02i/", $y, $m, $d));
}

# Format a date as (YYYY,MM,DD)
my $format_date = sub {
    my ($y, $m, $d) = @_;

    return (sprintf("%.4d", $y), sprintf("%.2d", $m), sprintf("%.2d", $d));
};

# Get a date $inc days in the future.
# $inc must be lesser than 28, as this function does not
# overflow to monthes after the next properly.
my $get_future_day = sub {
    my $inc = shift;
    
    my ($y, $m, $d) = @_;

    $d += $inc;
    if ($d > days_in($y,$m))
    {
        $d -= days_in($y,$m);
        $m++;
        if ($m > 12)
        {
            $m = 1;
            $y++;
        }
    }
    return $format_date->($y,$m,$d);
};


my $get_end_of_week = sub {
    return $get_future_day->(6,@_);
};

my $get_next_week = sub {
    return $get_future_day->(7,@_);
};

my $get_next_day = sub {
    return $get_future_day->(1,@_);
};

my $get_prev_week = sub {
    my ($new_year, $new_month, $new_day) = @_;

    if ($new_day - 7 < 1)
    {
        $new_month--;
        if ($new_month == 0)
        {
            $new_year--;
            $new_month = 12;
        }
        return ($new_year, $new_month, days_in($new_year,$new_month) - 7 + $new_day);
    }
    else
    {
        return ($new_year, $new_month, $new_day - 7);
    }
};


# Make sure our URL ends with a slash.
my $base_url = &normalize_url($q, \&check_url);

print $q->header();

my $title = "Weekly Calendar for Week of " . sprintf("%.2d/%.2d/%.4d", $day, $month, $year);

my $layout = 
    Technion::Seminars::Layout->new(
        'path' => $base_url,
        'title' => $title,
    );

my $get_week_url = sub {
    return $layout->linkto(["week", @_]);
};
    
my $o = Gamla::TextStream::Out::File->new(\*STDOUT);


my $draw_page = sub {
    
    my $o = shift;

    $o->print("<h1>$title</h1>\n");

    my $navigation_bar = 
        "<table border=\"1\">\n" . 
        "<tr>\n" .
        "<td><a href=\"" . $get_week_url->($get_prev_week->($year,$month,$day)) . "\">Previous Week</a></td>\n" .
        "<td><a href=\"" . $get_week_url->($get_next_week->($year,$month,$day)) . "\">Next Week</a></td>\n" .
        
        "</tr>\n" .
        "</table>\n";

    $o->print($navigation_bar);

    my @week_calendar = (map { [ map { [] } (1 .. 5) ] } (1..7));

    my @time_breaks = qw(0:00 8:30 12:30 16:30 20:30 24:00);

    my ($record, $time_coord, $day_coord);

    my $dbh = Technion::Seminars::DBI->new();

    my $type_man = Technion::Seminars::TypeMan::get_type_man();

    my $sth = $dbh->prepare("SELECT seminars.Seminar_ID, seminars.Title, seminars.Date, seminars.Time" . 
    " FROM seminars, associations" . 
    " WHERE seminars.Date >= " . $dbh->quote(sprintf("%.4i-%.2i-%.2i", $year,$month,$day)) . 
    " AND seminars.Date <= " . $dbh->quote(sprintf("%.4i-%.2i-%.2i", $get_end_of_week->($year,$month,$day))) . 
    " AND seminars.Seminar_ID = associations.Seminar_ID GROUP BY seminars.Seminar_ID ORDER BY seminars.Date, seminars.Time");

    my $rv = $sth->execute();

    my $record = $sth->fetchrow_arrayref();

    my @day_dates = ([$year, $month, $day]);

    for(my $a=1;$a<7;$a++)
    {
        push @day_dates, [ $get_next_day->(@{$day_dates[$#day_dates]}) ];
    }
    
    my (@row);
    
    if (defined($record))
    {
        @row = @$record;
        LOOP:               
        for($day_coord=0;$day_coord<7;$day_coord++)
        {
            for($time_coord=0;$time_coord<5;$time_coord++)
            {
                while (($row[2] eq sprintf("%.4i-%.2i-%.2i", @{$day_dates[$day_coord]})) && 
                       ($type_man->compare_values("time", {}, $row[3], $time_breaks[$time_coord+1]) < 0))
                {
                    push @{$week_calendar[$day_coord]->[$time_coord]}, [ @row];
                    $record = $sth->fetchrow_arrayref();
                    if (!defined($record))
                    {
                        last LOOP;
                    }
                    @row = @$record;
                }
            }
        }
    }
    
    $o->print("<table border=\"1\" width=\"100%\">\n");
    

    my $set_width = " style=\"width:12.5%\" ";
    $o->print("<tr>\n");
    $o->print("<td valign=\"top\" $set_width></td>\n");
    for(my $d=0;$d<7;$d++)
    {
        $o->print("<td valign=\"top\" $set_width><a href=\"" . $layout->linkto(["day", @{$day_dates[$d]} ]) . "\">" . $week_days_abbrevs[$d] . "</a></td>\n");
    }
    $o->print("</tr>\n");

    for($time_coord=0;$time_coord<5;$time_coord++)
    {
        $o->print("<tr>\n");
        $o->print("<td>". $time_breaks[$time_coord] . "-".$time_breaks[$time_coord+1]."</td>\n");
        for($day_coord=0;$day_coord<7;$day_coord++)
        {
            $o->print("<td valign=\"top\" $set_width>\n");
            $o->print(
                join(
                    "\n<br />\n", 
                    (map 
                        {  
                            my ($id, $title, $date, $time) = @$_;
                            "<a href=\"" . $layout->linkto(["seminar", $id]) . "\">" . CGI::escapeHTML($title) . "</a>";
                        } 
                        @{$week_calendar[$day_coord]->[$time_coord]}
                    )
                )
            );

            $o->print("</td>\n");
        }
        $o->print("</tr>\n");
    }
    
    $o->print("</table>\n");

    

};


$layout->render($o, $draw_page);
